"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from typing import List

import environ

# from celery.schedules import crontab

ROOT_DIR = environ.Path(__file__) - 3
APPS_DIR = ROOT_DIR.path("mysite")

env = environ.Env(
    DJANGO_SECRET_KEY=str,
    DEBUG=(bool, False),
    ALLOWED_HOSTS=(list, ["127.0.0.1:8000"]),
    DATABASE_URL=str,
    BASE_URL=str,
)

environ.Env.read_env(str(ROOT_DIR.path(os.getenv("ENV_PATH"))))

DEBUG = env("DEBUG")
ALLOWED_HOSTS = env("ALLOWED_HOSTS")

SECRET_KEY = env("DJANGO_SECRET_KEY")

# Application definition

INSTALLED_APPS = [
    "mysite.users",
    "mysite.base",
    "mysite.home",
    "mysite.reflections",
    "wagtail.contrib.forms",
    "wagtail.contrib.redirects",
    "wagtail.embeds",
    "wagtail.sites",
    "wagtail.users",
    "wagtail.snippets",
    "wagtail.documents",
    "wagtail.images",
    "wagtail.search",
    "wagtail.admin",
    "wagtail.contrib.modeladmin",  # not there by default
    "wagtail.contrib.routable_page",  # not there by default
    "wagtail.core",
    "wagtail.contrib.table_block",  # not there by default
    "wagtail.contrib.styleguide",  # not there by default
    # 'wagtail.contrib.sitemaps',     # not there by default
    "wagtail.contrib.postgres_search",
    "modelcluster",
    "taggit",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sitemaps",  # not there by default
    "django.contrib.sites",  # not there by default
    "django.contrib.humanize",  # not there by default
    "django_user_agents",  # https://github.com/selwin/django-user_agents
    "django_extensions",  # https://github.com/django-extensions/django-extensions
    "multiselectfield",  # https://github.com/goinnn/django-multiselectfield
    "maintenancemode",  # https://github.com/shanx/django-maintenancemode
    # 'crispy_forms',       # http://django-crispy-forms.readthedocs.io/en/latest/
    # 'floppyforms',        # https://github.com/gregmuellegger/django-floppyforms
    "wagtailfontawesome",  # https://gitlab.com/alexgleason/wagtailfontawesome
    "widget_tweaks",  # https://github.com/jazzband/django-widget-tweaks
    "el_pagination",  # https://django-el-pagination.readthedocs.io/en/latest/
    "django_social_share",  # https://github.com/fcurella/django-social-share
    "colorful",  # https://github.com/charettes/django-colorful
    "compressor",  # https://django-compressor.readthedocs.io
    "mjml",  # https://github.com/liminspace/django-mjml
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",  # not there by default
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.common.BrokenLinkEmailsMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",
    "maintenancemode.middleware.MaintenanceModeMiddleware",
    "django_user_agents.middleware.UserAgentMiddleware",
]

# TEMPLATES settings moved to dev.py & production.py

ROOT_URLCONF = "config.urls"

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {"default": env.db()}
DATABASES["default"]["ATOMIC_REQUESTS"] = True

# PASSWORD STORAGE SETTINGS
# ------------------------------------------------------------------------------
# See https://docs.djangoproject.com/en/dev/topics/auth/passwords/#using-argon2-with-django
PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.BCryptPasswordHasher",
]

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-gb"

LANGUAGES = (("en", "English"),)

TIME_ZONE = "Africa/Lusaka"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    "compressor.finders.CompressorFinder",
]

# this is where Django *looks for* static files
STATICFILES_DIRS = [str(APPS_DIR.path("static"))]

# ManifestStaticFilesStorage is recommended in production, to prevent outdated
# Javascript / CSS assets being served from cache (e.g. after a Wagtail upgrade).
# See https://docs.djangoproject.com/en/2.2/ref/contrib/staticfiles/#manifeststaticfilesstorage
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"

# this is where static files are *collected*
STATIC_ROOT = str(APPS_DIR("staticfiles"))

# this is the *URL* for static files
STATIC_URL = "/static/"

MEDIA_ROOT = str(APPS_DIR("files"))
MEDIA_URL = "/files/"

FILE_UPLOAD_MAX_MEMORY_SIZE = 35000000

# Wagtail settings

WAGTAIL_SITE_NAME = "mysite"

# Base URL to use when referring to full URLs within the Wagtail admin backend -
# e.g. in notification emails. Don't include '/admin' or a trailing slash
BASE_URL = env("BASE_URL")  # 'http://localhost:8000' for dev

SITE_ID = 1

MAINTENANCE_503_TEMPLATE = "maintenance_mode/503.html"

MAINTENANCE_BLOCK_STAFF = True

LIST_OF_EMAIL_RECIPIENTS: List[str] = []

ADMINS = (("Victor Miti", "somebody@example.com"),)  # email will be sent to your_email

MANAGERS = ADMINS

WAGTAILEMBEDS_FINDERS = [{"class": "wagtail.embeds.finders.oembed"}]
WAGTAILEMBEDS_RESPONSIVE_HTML = True

COUNTRIES_FIRST = ["ZM"]

COMPRESS_STORAGE = "compressor.storage.GzipCompressorFileStorage"

MESSAGE_STORAGE = "django.contrib.messages.storage.session.SessionStorage"

AUTH_USER_MODEL = "users.User"

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Omitting the 'default' editor now leaves the original default editor intact,
# so it is no longer necessary to redefine 'default' when adding alternative editors.
WAGTAILADMIN_RICH_TEXT_EDITORS = {
    "simple": {
        "WIDGET": "wagtail.admin.rich_text.DraftailRichTextArea",
        "OPTIONS": {
            "features": [
                "bold",
                "italic",
                "ol",
                "ul",
                "link",
                "superscript",
                "subscript",
                "strikethrough",
                "blockquote",
                "hr",
                "code",
            ]
        },
    }
}

# https://github.com/liminspace/django-mjml
MJML_BACKEND_MODE = "cmd"
MJML_EXEC_CMD = [
    os.path.join(ROOT_DIR, "node_modules/.bin/mjml"),
    "--config.validationLevel",
    "skip",
]
MJML_CHECK_CMD_ON_STARTUP = False

# Celery
# ------------------------------------------------------------------------------
# if USE_TZ:
#     # http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-timezone
#     CELERY_TIMEZONE = TIME_ZONE
# # http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-broker_url
# CELERY_BROKER_URL = env("CELERY_BROKER_URL")
# # http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-result_backend
# CELERY_RESULT_BACKEND = CELERY_BROKER_URL
# # http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-accept_content
# CELERY_ACCEPT_CONTENT = ["json"]
# # http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-task_serializer
# CELERY_TASK_SERIALIZER = "json"
# # http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-result_serializer
# CELERY_RESULT_SERIALIZER = "json"
# # http://docs.celeryproject.org/en/latest/userguide/configuration.html#task-time-limit
# # TODO: set to whatever value is adequate in your circumstances
# CELERY_TASK_TIME_LIMIT = 5 * 60
# # http://docs.celeryproject.org/en/latest/userguide/configuration.html#task-soft-time-limit
# # TODO: set to whatever value is adequate in your circumstances
# CELERY_TASK_SOFT_TIME_LIMIT = 60
# # https://docs.celeryproject.org/en/v4.4.7/userguide/configuration.html#task-default-queue
# CELERY_DEFAULT_QUEUE = "mysite"

# # https://docs.celeryproject.org/en/v4.4.7/userguide/periodic-tasks.html#beat-entries
# CELERY_BEAT_SCHEDULE = {
#     "get_daily_quote": {
#         "task": "task_fetch_daily_quote",
#         # Executes everyday at midnight (good for production)
#         "schedule": crontab(minute=0, hour=0),
#         # Executes every 2 hours (for development)
#         # "schedule": crontab(minute=0, hour="*/2"),
#         # Executes every 5 minutes (for development)
#         # "schedule": crontab(minute="*/5"),
#     },
# }
